<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TermCraft</name>
    </assembly>
    <members>
        <member name="T:TermCraft.Actions">
            <summary>
            Handles user input and selects actions to do
            </summary>
        </member>
        <member name="M:TermCraft.Actions.DoAction(System.String)">
            <summary>
            Reads from <see cref="M:System.Console.ReadLine"/> and compares it to known commands, then executes that commands function.
            Not case sensitive
            </summary>
            <param name="input">Set by <see cref="M:System.Console.ReadLine"/></param>
        </member>
        <member name="M:TermCraft.Actions.OpenHelp">
            <summary>
            Builds <see cref="M:TermCraft.Pages.Help"/> to <see cref="F:TermCraft.Buffer.buffer"/> and calls <see cref="M:TermCraft.Buffer.Draw"/>
            </summary>
        </member>
        <member name="M:TermCraft.Actions.OpenInventory">
            <summary>
            Builds the <see cref="T:TermCraft.Inventory"/> of the selected <see cref="T:TermCraft.Player"/>/<see cref="T:TermCraft.AI"/>/<see cref="T:TermCraft.Building"/> to <see cref="F:TermCraft.Buffer.buffer"/> then calls <see cref="M:TermCraft.Buffer.Draw"/>
            </summary>
        </member>
        <member name="M:TermCraft.Actions.OpenPatreon">
            <summary>
            Builds <see cref="M:TermCraft.Pages.Patreon"/> to <see cref="F:TermCraft.Buffer.buffer"/> and calls <see cref="M:TermCraft.Buffer.Draw"/>
            </summary>
        </member>
        <member name="M:TermCraft.Actions.OpenMarket">
            <summary>
            Builds <see cref="M:TermCraft.Pages.Market"/> to <see cref="F:TermCraft.Buffer.buffer"/> and calls <see cref="M:TermCraft.Buffer.Draw"/>
            </summary>
        </member>
        <member name="M:TermCraft.Actions.OpenCharacter">
            <summary>
            Builds <see cref="M:TermCraft.Pages.Player"/> to <see cref="F:TermCraft.Buffer.buffer"/> and calls <see cref="M:TermCraft.Buffer.Draw"/>
            </summary>
        </member>
        <member name="M:TermCraft.Actions.Select">
            <summary>
            NYI: Require multi word input read
            </summary>
        </member>
        <member name="M:TermCraft.Actions.ReturnToLastScreen">
            <summary>
            Sets the <see cref="F:TermCraft.Buffer.buffer"/> to <see cref="P:TermCraft.Pages.lastPage"/> then calls <see cref="M:TermCraft.Buffer.Draw"/>
            </summary>
        </member>
        <member name="M:TermCraft.Actions.Terminate">
            <summary>
            Signals to <see cref="T:TermCraft.Program"/> that we no longer wish to run <see cref="M:TermCraft.Program.CaptureInput"/>.
            This will terminate the application!
            </summary>
        </member>
        <member name="M:TermCraft.Actions.InvalidInput">
            <summary>
            No valid input detected. Calls <see cref="M:TermCraft.Buffer.Draw"/>
            </summary>
        </member>
        <member name="T:TermCraft.Buffer">
            <summary>
            Handles the output buffer and output to console
            </summary>
        </member>
        <member name="F:TermCraft.Buffer.buffer">
            <summary>
            Drawable <see cref="T:System.Char"/>[][] buffer
            </summary>
        </member>
        <member name="F:TermCraft.Buffer.borderCharSet">
            <summary>
            Current character set
            </summary>
        </member>
        <member name="T:TermCraft.Buffer.CharSet">
            <summary>
            Character sets
            </summary>
        </member>
        <member name="F:TermCraft.Buffer.CharSet.Default">
            <summary>
            Default double-line borders
            </summary>
        </member>
        <member name="F:TermCraft.Buffer.CharSet.Thin">
            <summary>
            Thinner single-line version borders
            </summary>
        </member>
        <member name="F:TermCraft.Buffer.CharSet.Full">
            <summary>
            Full opacity borders
            </summary>
        </member>
        <member name="M:TermCraft.Buffer.Init">
            <summary>
            Initialize <see cref="F:TermCraft.Buffer.buffer"/>
            </summary>
        </member>
        <member name="M:TermCraft.Buffer.SetBorderCharSet(TermCraft.Buffer.CharSet)">
            <summary>
            Sets the <see cref="T:TermCraft.Buffer.CharSet"/> used for the borders
            </summary>
            <param name="charSet">Selected <see cref="T:TermCraft.Buffer.CharSet"/></param>
        </member>
        <member name="M:TermCraft.Buffer.Draw">
            <summary>
            Draws <see cref="F:TermCraft.Buffer.buffer"/> to <see cref="T:System.Console"/>
            </summary>
        </member>
        <member name="M:TermCraft.Buffer.Clear">
            <summary>
            Replaces <see cref="F:TermCraft.Buffer.buffer"/> content with ' '
            Calls <see cref="M:TermCraft.Buffer.BuildDefaultUI"/> after completion
            </summary>
        </member>
        <member name="M:TermCraft.Buffer.BuildDefaultUI">
            <summary>
            Builds the default UI with the set <see cref="T:TermCraft.Buffer.CharSet"/>.
            Called after <see cref="M:TermCraft.Buffer.Clear"/>
            </summary>
        </member>
        <member name="M:TermCraft.Buffer.WriteHorizontalLine(System.Char,System.Int32)">
            <summary>
            Writes a full length horizontal line to <see cref="F:TermCraft.Buffer.buffer"/>
            </summary>
            <param name="c"><see cref="T:System.Char"/> to use</param>
            <param name="y">Vertical placement</param>
        </member>
        <member name="M:TermCraft.Buffer.WriteHorizontalLine(System.Char,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Writes a specified <paramref name="length"/> horizontal line to <see cref="F:TermCraft.Buffer.buffer"/> from <paramref name="startX"/>
            </summary>
            <param name="c"><see cref="T:System.Char"/> to use</param>
            <param name="y">Vertical placement</param>
            <param name="startX">Horizontal start of the line</param>
            <param name="length">Length of the line</param>
        </member>
        <member name="M:TermCraft.Buffer.WriteVerticalLine(System.Char,System.Int32)">
            <summary>
            Writes a full length vertical line to <see cref="F:TermCraft.Buffer.buffer"/>
            </summary>
            <param name="c"><see cref="T:System.Char"/> to use</param>
            <param name="x">Horizontal placement</param>
        </member>
        <member name="M:TermCraft.Buffer.WriteVerticalLine(System.Char,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Writes a specified <paramref name="length"/> vertical line to <see cref="F:TermCraft.Buffer.buffer"/> from <paramref name="startY"/>
            </summary>
            <param name="c"><see cref="T:System.Char"/> to use</param>
            <param name="x">Horizontal placement</param>
            <param name="startY">Vertical start of the line</param>
            <param name="length">Length of the line</param>
        </member>
        <member name="M:TermCraft.Buffer.WriteChar(System.Char,System.Int32,System.Int32)">
            <summary>
            Writes the specified <see cref="T:System.Char"/> to <see cref="F:TermCraft.Buffer.buffer"/>
            </summary>
            <param name="c">Character to add</param>
            <param name="x">Horizontal placement</param>
            <param name="y">Vertical placement</param>
        </member>
        <member name="M:TermCraft.Buffer.WriteHorizontalText(System.String,System.Int32,System.Int32)">
            <summary>
            Writes <paramref name="input"/> horizontally to <see cref="F:TermCraft.Buffer.buffer"/> from <paramref name="startX"/>
            </summary>
            <param name="input">Text to add</param>
            <param name="y">Vertical placement</param>
            <param name="startX">Horizontal placement of the first input character</param>
        </member>
        <member name="M:TermCraft.Buffer.WriteVerticalText(System.String,System.Int32,System.Int32)">
            <summary>
            Writes <paramref name="input"/> vertically to <see cref="F:TermCraft.Buffer.buffer"/> from <paramref name="startY"/>
            </summary>
            <param name="input">Text to add</param>
            <param name="x">Horizontal placement</param>
            <param name="startY">Vertical placement of the first input character</param>
        </member>
        <member name="T:TermCraft.Name">
            <summary>
            The <see cref="T:TermCraft.Name"/> class is used to generate psuedorandom names
            </summary>
        </member>
        <member name="F:TermCraft.Name.femaleFirstNames">
            <summary>
            Female First Names
            </summary>
        </member>
        <member name="F:TermCraft.Name.femaleMiddleNames">
            <summary>
            Female Middle Names
            </summary>
        </member>
        <member name="F:TermCraft.Name.maleFirstNames">
            <summary>
            Male First Names
            </summary>
        </member>
        <member name="F:TermCraft.Name.maleMiddleNames">
            <summary>
            Males Middle Names
            </summary>
        </member>
        <member name="F:TermCraft.Name.lastNames">
            <summary>
            Gender-neutral Last Names
            </summary>
        </member>
        <member name="T:TermCraft.Name.Gender">
            <summary>
            Which <see cref="T:TermCraft.Name.Gender"/> to select
            </summary>
        </member>
        <member name="F:TermCraft.Name.Gender.Female">
            <summary>
            <see cref="T:TermCraft.Name.Gender"/>is set to Female
            </summary>
        </member>
        <member name="F:TermCraft.Name.Gender.Male">
            <summary>
            <see cref="T:TermCraft.Name.Gender"/> is set to Male
            </summary>
        </member>
        <member name="F:TermCraft.Name.middleNameChance">
            <summary>
            Sets the chance of getting a middle name (0 - 1)
            </summary>
        </member>
        <member name="F:TermCraft.Name.doubleLastNameChance">
            <summary>
            Sets the chance of getting two last names (0 - 1)
            </summary>
        </member>
        <member name="M:TermCraft.Name.Init">
            <summary>
            Initializes the various arrays containing names
            </summary>
        </member>
        <member name="M:TermCraft.Name.Create(TermCraft.Name.Gender)">
            <summary>
            Creates a new name and returns it
            </summary>
            <param name="gender">Which <see cref="T:TermCraft.Name.Gender"/> to use</param>
            <returns>The newly generated name</returns>
        </member>
        <member name="M:TermCraft.Name.FemaleFirstNames">
            <summary>
            Female First Names
            </summary>
        </member>
        <member name="M:TermCraft.Name.FemaleMiddleNames">
            <summary>
            Female Middle Names
            </summary>
        </member>
        <member name="M:TermCraft.Name.MaleFirstNames">
            <summary>
            Male First Names
            </summary>
        </member>
        <member name="M:TermCraft.Name.MaleMiddleNames">
            <summary>
            Male Middle Names
            </summary>
        </member>
        <member name="M:TermCraft.Name.LastNames">
            <summary>
            Gender Neutral Last Names
            </summary>
        </member>
        <member name="T:TermCraft.Pages">
            <summary>
            Data class to draw the selected <see cref="T:TermCraft.Pages.Page"/> to <see cref="F:TermCraft.Buffer.buffer"/>.
            This class does not call <see cref="M:TermCraft.Buffer.Draw"/>
            </summary>
        </member>
        <member name="T:TermCraft.Pages.Page">
            <summary>
            Enumerable list of drawable pages
            </summary>
        </member>
        <member name="F:TermCraft.Pages.Page.Splash">
            <summary>
            Splash screen
            </summary>
        </member>
        <member name="F:TermCraft.Pages.Page.Menu">
            <summary>
            Menu screen
            </summary>
        </member>
        <member name="F:TermCraft.Pages.Page.Help">
            <summary>
            Help screen
            </summary>
        </member>
        <member name="F:TermCraft.Pages.Page.Inventory">
            <summary>
            Inventory screen
            </summary>
        </member>
        <member name="F:TermCraft.Pages.Page.Settings">
            <summary>
            Settings screen
            </summary>
        </member>
        <member name="F:TermCraft.Pages.Page.Market">
            <summary>
            Market screen
            </summary>
        </member>
        <member name="F:TermCraft.Pages.Page.Patreon">
            <summary>
            Patreon screen
            </summary>
        </member>
        <member name="F:TermCraft.Pages.Page.Character">
            <summary>
            Character screen
            </summary>
        </member>
        <member name="F:TermCraft.Pages.currentPage">
            <summary>
            Indicates the <see cref="T:TermCraft.Pages.Page"/> that is last drawn to <see cref="T:System.Console"/>
            </summary>
        </member>
        <member name="P:TermCraft.Pages.lastPage">
            <summary>
            Indicates the <see cref="T:TermCraft.Pages.Page"/> that was drawn prior to the <see cref="F:TermCraft.Pages.currentPage"/>
            </summary>
        </member>
        <member name="M:TermCraft.Pages.SetLastPage(TermCraft.Pages.Page)">
            <summary>
            Sets <see cref="P:TermCraft.Pages.lastPage"/> to <paramref name="page"/>.
            Called when writing a <see cref="T:TermCraft.Pages.Page"/> to <see cref="F:TermCraft.Buffer.buffer"/>
            </summary>
            <param name="page"></param>
        </member>
        <member name="M:TermCraft.Pages.Init">
            <summary>
            Initialize <see cref="T:TermCraft.Pages"/>
            </summary>
        </member>
        <member name="M:TermCraft.Pages.Help">
            <summary>
            Sets <see cref="P:TermCraft.Pages.lastPage"/> to <see cref="F:TermCraft.Pages.currentPage"/>.
            Writes <see cref="M:TermCraft.Pages.Help"/> to <see cref="F:TermCraft.Buffer.buffer"/>
            </summary>
        </member>
        <member name="M:TermCraft.Pages.Inventory">
            <summary>
            Sets <see cref="P:TermCraft.Pages.lastPage"/> to <see cref="F:TermCraft.Pages.currentPage"/>.
            Writes <see cref="M:TermCraft.Pages.Inventory"/> to <see cref="F:TermCraft.Buffer.buffer"/>
            </summary>
        </member>
        <member name="M:TermCraft.Pages.Menu">
            <summary>
            Sets <see cref="P:TermCraft.Pages.lastPage"/> to <see cref="F:TermCraft.Pages.currentPage"/>.
            Writes <see cref="M:TermCraft.Pages.Menu"/> to <see cref="F:TermCraft.Buffer.buffer"/>
            </summary>
        </member>
        <member name="M:TermCraft.Pages.Settings">
            <summary>
            Sets <see cref="P:TermCraft.Pages.lastPage"/> to <see cref="F:TermCraft.Pages.currentPage"/>.
            Writes <see cref="M:TermCraft.Pages.Settings"/> to <see cref="F:TermCraft.Buffer.buffer"/>
            </summary>
        </member>
        <member name="M:TermCraft.Pages.Market">
            <summary>
            Sets <see cref="P:TermCraft.Pages.lastPage"/> to <see cref="F:TermCraft.Pages.currentPage"/>.
            Writes <see cref="M:TermCraft.Pages.Market"/> to <see cref="F:TermCraft.Buffer.buffer"/>
            </summary>
        </member>
        <member name="M:TermCraft.Pages.Patreon">
            <summary>
            Sets <see cref="P:TermCraft.Pages.lastPage"/> to <see cref="F:TermCraft.Pages.currentPage"/>.
            Writes <see cref="M:TermCraft.Pages.Patreon"/> to <see cref="F:TermCraft.Buffer.buffer"/>
            </summary>
        </member>
        <member name="M:TermCraft.Pages.Player">
            <summary>
            Sets <see cref="P:TermCraft.Pages.lastPage"/> to <see cref="F:TermCraft.Pages.currentPage"/>.
            Writes <see cref="M:TermCraft.Pages.Player"/> to <see cref="F:TermCraft.Buffer.buffer"/>
            </summary>
        </member>
        <member name="M:TermCraft.Pages.Splash">
            <summary>
            Sets <see cref="P:TermCraft.Pages.lastPage"/> to <see cref="F:TermCraft.Pages.currentPage"/>.
            Writes <see cref="M:TermCraft.Pages.Splash"/> to <see cref="F:TermCraft.Buffer.buffer"/>
            </summary>
        </member>
        <member name="M:TermCraft.Pages.RecallLastPage">
            <summary>
            Writes <see cref="P:TermCraft.Pages.lastPage"/> to <see cref="F:TermCraft.Buffer.buffer"/>
            </summary>
        </member>
        <member name="T:TermCraft.Update">
            <summary>
            <see cref="M:TermCraft.Update.Tick"/> is running without regards to time passed.
            </summary>
        </member>
        <member name="F:TermCraft.Update.updateThread">
            <summary>
            The main <see cref="T:System.Threading.Thread"/>. It calls <see cref="M:TermCraft.Update.Tick"/>
            </summary>
        </member>
        <member name="F:TermCraft.Update.isRunning">
            <summary>
            Is set to <see langword="true"/> when started.
            <see cref="F:TermCraft.Update.updateThread"/> stops when set to <see langword="false"/>
            </summary>
        </member>
        <member name="M:TermCraft.Update.Init">
            <summary>
            <list type="number">
            <item><description>Creates <see cref="T:System.Threading.Thread"/> <see cref="F:TermCraft.Update.updateThread"/> and affiliates it with method <see cref="M:TermCraft.Update.Tick"/></description></item>
            <item><description>Sets <see cref="F:TermCraft.Update.isRunning"/> to <see langword="true"/></description></item>
            <item><description>Starts executing <see cref="M:TermCraft.Update.Tick"/> until <see cref="F:TermCraft.Update.isRunning"/> is set to <see langword="false"/></description></item>
            </list>
            </summary>
        </member>
        <member name="M:TermCraft.Update.Tick">
            <summary>
            <see cref="M:TermCraft.Update.Tick"/> runs in <see cref="F:TermCraft.Update.updateThread"/> until <see cref="F:TermCraft.Update.isRunning"/> is set to <see langword="false"/>
            </summary>
        </member>
        <member name="T:TermCraft.AI">
            <summary>
            Data class for <see cref="T:TermCraft.AI"/>
            </summary>
        </member>
        <member name="P:TermCraft.AI.inventory">
            <summary>
            The <see cref="T:TermCraft.Inventory"/> attached to this <see cref="T:TermCraft.AI"/>
            </summary>
        </member>
        <member name="P:TermCraft.AI.name">
            <summary>
            The name of this <see cref="T:TermCraft.AI"/>
            </summary>
        </member>
        <member name="P:TermCraft.AI.level">
            <summary>
            The level of tihs <see cref="T:TermCraft.AI"/>
            </summary>
        </member>
        <member name="T:TermCraft.AI.Type">
            <summary>
            Enumerable list of <see cref="T:TermCraft.AI.Type"/>
            </summary>
        </member>
        <member name="F:TermCraft.AI.Type.Investor">
            <summary>
            <see cref="T:TermCraft.AI"/> will behave as an Investor
            </summary>
        </member>
        <member name="F:TermCraft.AI.Type.Banker">
            <summary>
            <see cref="T:TermCraft.AI"/> will behave as a Banker
            </summary>
        </member>
        <member name="F:TermCraft.AI.Type.Secretary">
            <summary>
            <see cref="T:TermCraft.AI"/> will behave as a Secretary
            </summary>
        </member>
        <member name="F:TermCraft.AI.Type.Advisor">
            <summary>
            <see cref="T:TermCraft.AI"/> will behave as an Advisor
            </summary>
        </member>
        <member name="P:TermCraft.AI.type">
            <summary>
            The <see cref="T:TermCraft.AI.Type"/> of this <see cref="T:TermCraft.AI"/>
            </summary>
        </member>
        <member name="M:TermCraft.AI.#ctor(TermCraft.AI.Type,System.String)">
            <summary>
            Creates a new <see cref="T:TermCraft.AI"/> of <see cref="T:TermCraft.AI.Type"/> <paramref name="type"/> with the set <paramref name="name"/> and adds it to the <see cref="T:TermCraft.Register"/>
            </summary>
            <param name="type">The <see cref="T:TermCraft.AI.Type"/> of <see cref="T:TermCraft.AI"/></param>
            <param name="name">The name of the <see cref="T:TermCraft.AI"/></param>
        </member>
        <member name="M:TermCraft.AI.#ctor(TermCraft.AI.Type,System.String,TermCraft.Inventory,System.Int16)">
            <summary>
            Loads an <see cref="T:TermCraft.AI"/> to the <see cref="T:TermCraft.Register"/> with the set parameters
            </summary>
            <param name="type">The <see cref="T:TermCraft.AI.Type"/> of <see cref="T:TermCraft.AI"/></param>
            <param name="name">The name of the <see cref="T:TermCraft.AI"/></param>
            <param name="inventory">The <see cref="T:TermCraft.Inventory"/> of the <see cref="T:TermCraft.AI"/></param>
            <param name="level">The level of the <see cref="T:TermCraft.AI"/></param>
        </member>
        <member name="M:TermCraft.AI.Remove">
            <summary>
            Removes <see langword="this"/> <see cref="T:TermCraft.AI"/> from the <see cref="T:TermCraft.Register"/>
            </summary>
        </member>
        <member name="T:TermCraft.Bank">
            <summary>
            The <see cref="T:TermCraft.Bank"/> keeps track of which account numbers are in use
            </summary>
        </member>
        <member name="P:TermCraft.Bank.accountNumbersInUse">
            <summary>
            A <see cref="T:System.Collections.Generic.List`1"/> over the currently used account numbers
            </summary>
        </member>
        <member name="F:TermCraft.Bank.accountNumbersInUse1_4">
            <summary>
            First 4 digits of <see cref="P:TermCraft.Bank.accountNumbersInUse"/>
            </summary>
        </member>
        <member name="F:TermCraft.Bank.accountNumbersInUse5_6">
            <summary>
            Middle 2 digits of <see cref="P:TermCraft.Bank.accountNumbersInUse"/>
            </summary>
        </member>
        <member name="F:TermCraft.Bank.accountNumbersInUse7_11">
            <summary>
            Last 5 digits of <see cref="P:TermCraft.Bank.accountNumbersInUse"/>
            </summary>
        </member>
        <member name="M:TermCraft.Bank.Init">
            <summary>
            Initializes <see cref="P:TermCraft.Bank.accountNumbersInUse"/>, <see cref="F:TermCraft.Bank.accountNumbersInUse1_4"/>, <see cref="F:TermCraft.Bank.accountNumbersInUse5_6"/> and <see cref="F:TermCraft.Bank.accountNumbersInUse7_11"/>
            </summary>
        </member>
        <member name="M:TermCraft.Bank.IsAccountInUse(System.Int64)">
            <summary>
            Checks if <paramref name="accountNumber"/> is already in use
            </summary>
            <param name="accountNumber">The <paramref name="accountNumber"/> to check</param>
            <returns>Returns <see langword="true"/> if the account is in use</returns>
        </member>
        <member name="M:TermCraft.Bank.AddAccount">
            <summary>
            Returns a unique bank account number of type <see cref="T:System.Int64"/> and adds it to <see cref="P:TermCraft.Bank.accountNumbersInUse"/>
            </summary>
            <returns>A unique bank account number</returns>
        </member>
        <member name="M:TermCraft.Bank.GenerateNumber">
            <summary>
            Genereates a random number from 20000000000 to 99999999999
            </summary>
            <returns>A random number from 20000000000 to 99999999999</returns>
        </member>
        <member name="M:TermCraft.Bank.RemoveAccount(System.Int64)">
            <summary>
            Removes the given <paramref name="accountNumber"/> if it exist
            </summary>
            <param name="accountNumber">The account number to remove</param>
        </member>
        <member name="T:TermCraft.Building">
            <summary>
            Data class for <see cref="T:TermCraft.Building"/>
            </summary>
        </member>
        <member name="P:TermCraft.Building.inventory">
            <summary>
            The <see cref="T:TermCraft.Inventory"/> attached to this <see cref="T:TermCraft.Building"/>
            </summary>
        </member>
        <member name="P:TermCraft.Building.name">
            <summary>
            The name of this <see cref="T:TermCraft.Building"/>
            </summary>
        </member>
        <member name="P:TermCraft.Building.desc">
            <summary>
            The description of this <see cref="T:TermCraft.Building"/>
            </summary>
        </member>
        <member name="P:TermCraft.Building.value">
            <summary>
            The value of this <see cref="T:TermCraft.Building"/>
            </summary>
        </member>
        <member name="P:TermCraft.Building.level">
            <summary>
            The level of this <see cref="T:TermCraft.Building"/>
            </summary>
        </member>
        <member name="F:TermCraft.Building.availableCommands">
            <summary>
            A list of available commands for this <see cref="T:TermCraft.Building"/>
            </summary>
        </member>
        <member name="T:TermCraft.Building.Type">
            <summary>
            Enumerable list of <see cref="T:TermCraft.Building.Type"/>
            </summary>
        </member>
        <member name="F:TermCraft.Building.Type.Bank">
            <summary>
            This <see cref="T:TermCraft.Building"/> is behaving as a Bank
            </summary>
        </member>
        <member name="F:TermCraft.Building.Type.Store">
            <summary>
            This <see cref="T:TermCraft.Building"/> is behaving as a Store
            </summary>
        </member>
        <member name="F:TermCraft.Building.Type.Home">
            <summary>
            This <see cref="T:TermCraft.Building"/> is behaving as the Home of the <see cref="T:TermCraft.Player"/>
            </summary>
        </member>
        <member name="F:TermCraft.Building.Type.Quarry">
            <summary>
            This <see cref="T:TermCraft.Building"/> is behaving as a Quarry
            </summary>
        </member>
        <member name="P:TermCraft.Building.type">
            <summary>
            The <see cref="T:TermCraft.Building.Type"/> of this <see cref="T:TermCraft.Building"/>
            </summary>
        </member>
        <member name="M:TermCraft.Building.#ctor(TermCraft.Building.Type,System.Double,System.String,System.String,System.Boolean)">
            <summary>
            Creates a new <see cref="T:TermCraft.Building"/> of <see cref="T:TermCraft.Building.Type"/> <paramref name="type"/> with the set parameters and adds it to the <see cref="T:TermCraft.Register"/>
            </summary>
            <param name="type">The <see cref="T:TermCraft.Building.Type"/> of <see cref="T:TermCraft.Building"/></param>
            <param name="value">The value of this <see cref="T:TermCraft.Building"/></param>
            <param name="name">The name of this <see cref="T:TermCraft.Building"/></param>
            <param name="desc">The description of this <see cref="T:TermCraft.Building"/></param>
            <param name="noInv">Set to <see langword="true"/> if populating <see cref="T:TermCraft.Database"/></param>
        </member>
        <member name="M:TermCraft.Building.#ctor(TermCraft.Building.Type,System.Double,System.String,System.String,TermCraft.Inventory,System.Int16)">
            <summary>
            Loads the specified <see cref="T:TermCraft.Building"/> of <see cref="T:TermCraft.Building.Type"/> <paramref name="type"/> with the set parameters and adds it to the <see cref="T:TermCraft.Register"/>
            </summary>
            <param name="type">The <see cref="T:TermCraft.Building.Type"/> of <see cref="T:TermCraft.Building"/></param>
            <param name="value">The value of this <see cref="T:TermCraft.Building"/></param>
            <param name="name">The name of this <see cref="T:TermCraft.Building"/></param>
            <param name="desc">The description of this <see cref="T:TermCraft.Building"/></param>
            <param name="inventory">The <see cref="T:TermCraft.Inventory"/> of this <see cref="T:TermCraft.Building"/></param>
            <param name="level">The level of this <see cref="T:TermCraft.Building"/></param>
        </member>
        <member name="M:TermCraft.Building.Remove">
            <summary>
            Removes <see langword="this"/> <see cref="T:TermCraft.Building"/> from the <see cref="T:TermCraft.Register"/>
            </summary>
        </member>
        <member name="T:TermCraft.Database">
            <summary>
            Database class
            </summary>
        </member>
        <member name="P:TermCraft.Database.items">
            <summary>
            A list of all spawnable entities of type <see cref="T:TermCraft.Item"/>
            </summary>
        </member>
        <member name="P:TermCraft.Database.buildings">
            <summary>
            A list of all spawnable entities of type <see cref="T:TermCraft.Building"/>
            </summary>
        </member>
        <member name="M:TermCraft.Database.Init">
            <summary>
            Initializes the <see cref="T:TermCraft.Database"/> and populates it
            </summary>
        </member>
        <member name="M:TermCraft.Database.AddItems">
            <summary>
            Adds all premade items of type <see cref="T:TermCraft.Item"/> to <see cref="P:TermCraft.Database.items"/>
            </summary>
        </member>
        <member name="M:TermCraft.Database.AddBuildings">
            <summary>
            Adds all premade buildings of type <see cref="T:TermCraft.Building"/> to <see cref="P:TermCraft.Database.buildings"/>
            </summary>
        </member>
        <member name="T:TermCraft.Inventory">
            <summary>
            Data class for <see cref="T:TermCraft.Inventory"/>. Used by other entites such as <see cref="T:TermCraft.AI"/>/<see cref="T:TermCraft.Building"/>/<see cref="T:TermCraft.Market"/>/<see cref="T:TermCraft.Player"/>
            </summary>
        </member>
        <member name="P:TermCraft.Inventory.contents">
            <summary>
            A list of type <see cref="T:System.Tuple`2"/> containing the current amount of <see cref="T:TermCraft.Item"/> held in this <see cref="T:TermCraft.Inventory"/>
            </summary>
        </member>
        <member name="P:TermCraft.Inventory.bankBalance">
            <summary>
            The current set balance of this <see cref="T:TermCraft.Inventory"/>
            </summary>
        </member>
        <member name="P:TermCraft.Inventory.bankAccountNumber">
            <summary>
            Holds an eleven-digit unique number
            </summary>
        </member>
        <member name="P:TermCraft.Inventory.bankAccountNumberFormatted">
            <summary>
            A <see cref="T:System.String"/> representation of <see cref="P:TermCraft.Inventory.bankAccountNumber"/> formatted to xxxx.xx.xxxxx
            </summary>
        </member>
        <member name="P:TermCraft.Inventory.grantedCredit">
            <summary>
            The maximum negative number <see cref="P:TermCraft.Inventory.bankBalance"/> can be set to
            </summary>
        </member>
        <member name="M:TermCraft.Inventory.#ctor">
            <summary>
            Sets <see cref="P:TermCraft.Inventory.bankAccountNumber"/> to an unique value and initializes <see cref="P:TermCraft.Inventory.contents"/>
            </summary>
        </member>
        <member name="M:TermCraft.Inventory.SetCreditLimit(System.Double)">
            <summary>
            Sets <see cref="P:TermCraft.Inventory.grantedCredit"/> to <paramref name="limit"/>
            </summary>
            <param name="limit">The maximum number that can be set negative</param>
        </member>
        <member name="M:TermCraft.Inventory.AddItem(TermCraft.Item,System.Int32)">
            <summary>
            Adds the specified <paramref name="amount"/> of type <see cref="T:TermCraft.Item"/>
            </summary>
            <param name="item">The <see cref="T:TermCraft.Item"/> to add</param>
            <param name="amount">The amount of <paramref name="item"/> to add</param>
        </member>
        <member name="M:TermCraft.Inventory.RemoveItem(TermCraft.Item,System.Int32)">
            <summary>
            Removes the specified <paramref name="amount"/> of type <see cref="T:TermCraft.Item"/>
            </summary>
            <param name="item">The <see cref="T:TermCraft.Item"/> to remove</param>
            <param name="amount">The amount of <paramref name="item"/> to remove</param>
        </member>
        <member name="M:TermCraft.Inventory.AddItems(TermCraft.Item[],System.Int32[])">
            <summary>
            Adds the specified <paramref name="amounts"/>[] of type <see cref="T:TermCraft.Item"/>[]
            </summary>
            <param name="items">The array of type <see cref="T:TermCraft.Item"/> to add</param>
            <param name="amounts">The array of amount of <paramref name="items"/> to add</param>
        </member>
        <member name="M:TermCraft.Inventory.RemoveItems(TermCraft.Item[],System.Int32[])">
            <summary>
            Removes the specified <paramref name="amounts"/>[] of type <see cref="T:TermCraft.Item"/>[]
            </summary>
            <param name="items">The array of type <see cref="T:TermCraft.Item"/> to remove</param>
            <param name="amounts">The array of amount of <paramref name="items"/> to remove</param>
        </member>
        <member name="M:TermCraft.Inventory.ChangeBalance(System.Double)">
            <summary>
            Adds <paramref name="amount"/> to <see cref="P:TermCraft.Inventory.bankBalance"/>.
            Number can be negative for subtraction
            </summary>
            <param name="amount">The amount to add to <see cref="P:TermCraft.Inventory.bankBalance"/></param>
            <returns><see langword="true"/> if successful, <see langword="false"/> if failed</returns>
        </member>
        <member name="T:TermCraft.Item">
            <summary>
            Data class for <see cref="T:TermCraft.Item"/>
            </summary>
        </member>
        <member name="P:TermCraft.Item.name">
            <summary>
            The name of this <see cref="T:TermCraft.Item"/>
            </summary>
        </member>
        <member name="P:TermCraft.Item.desc">
            <summary>
            The description of this <see cref="T:TermCraft.Item"/>
            </summary>
        </member>
        <member name="P:TermCraft.Item.baseValue">
            <summary>
            The value of this <see cref="T:TermCraft.Item"/>
            </summary>
        </member>
        <member name="P:TermCraft.Item.special">
            <summary>
            Indicates if this <see cref="T:TermCraft.Item"/> is special
            </summary>
        </member>
        <member name="T:TermCraft.Item.Unit">
            <summary>
            Enumerable list of type <see cref="T:TermCraft.Item.Unit"/>
            </summary>
        </member>
        <member name="P:TermCraft.Item.unit">
            <summary>
            The <see cref="T:TermCraft.Item.Unit"/> of this instance of <see cref="T:TermCraft.Item"/>
            </summary>
        </member>
        <member name="T:TermCraft.Item.Type">
            <summary>
            Enumerable list of type <see cref="T:TermCraft.Item.Type"/>
            </summary>
        </member>
        <member name="P:TermCraft.Item.type">
            <summary>
            The <see cref="T:TermCraft.Item.Type"/> of this instance of <see cref="T:TermCraft.Item"/>
            </summary>
        </member>
        <member name="M:TermCraft.Item.#ctor(TermCraft.Item.Type,TermCraft.Item.Unit,System.Double,System.String,System.String)">
            <summary>
            Creates a new <see cref="T:TermCraft.Item"/> with the given parameters
            </summary>
            <param name="type"><see cref="T:TermCraft.Item.Type"/> of <see cref="T:TermCraft.Item"/></param>
            <param name="unit"><see cref="T:TermCraft.Item.Unit"/> of <see cref="T:TermCraft.Item"/></param>
            <param name="baseValue">The value of the <see cref="T:TermCraft.Item"/></param>
            <param name="name">The name of the <see cref="T:TermCraft.Item"/></param>
            <param name="desc">The description of the <see cref="T:TermCraft.Item"/></param>
        </member>
        <member name="M:TermCraft.Item.SetSpecial(System.Boolean)">
            <summary>
            Sets the <see cref="P:TermCraft.Item.special"/> boolean of this <see cref="T:TermCraft.Item"/> to the value of <paramref name="special"/>
            </summary>
            <param name="special">The state to set <see cref="P:TermCraft.Item.special"/> too</param>
        </member>
        <member name="T:TermCraft.Market">
            <summary>
            The <see cref="T:TermCraft.Market"/> is used to convey items around
            </summary>
        </member>
        <member name="P:TermCraft.Market.inventory">
            <summary>
            The <see cref="T:TermCraft.Inventory"/> attached to this <see cref="T:TermCraft.Market"/>
            </summary>
        </member>
        <member name="M:TermCraft.Market.Init">
            <summary>
            Initializes the <see cref="P:TermCraft.Market.inventory"/> of the <see cref="T:TermCraft.Market"/> 
            </summary>
        </member>
        <member name="F:TermCraft.Market.availableCommands">
            <summary>
            An array of the available commands at the <see cref="T:TermCraft.Market"/> 
            </summary>
        </member>
        <member name="M:TermCraft.Market.AddToMarket(TermCraft.Item,System.Int32,System.Double)">
            <summary>
            Add a single <see cref="T:TermCraft.Item"/> to the <see cref="T:TermCraft.Market"/>
            </summary>
            <param name="item">The <see cref="T:TermCraft.Item"/> to add</param>
            <param name="amount">How many of the <see cref="T:TermCraft.Item"/> to add</param>
            <param name="price">The price of the <see cref="T:TermCraft.Item"/> to add</param>
        </member>
        <member name="M:TermCraft.Market.AddToMarket(TermCraft.Item[],System.Int32[],System.Double[])">
            <summary>
            Adds multiple <see cref="T:TermCraft.Item"/> to the <see cref="T:TermCraft.Market"/>
            </summary>
            <param name="items">The array of <see cref="T:TermCraft.Item"/> to add</param>
            <param name="amounts">How many of the various <see cref="T:TermCraft.Item"/> to add</param>
            <param name="prices">The price of the various <see cref="T:TermCraft.Item"/> to add</param>
        </member>
        <member name="M:TermCraft.Market.BuyFromMarket(TermCraft.Item,System.Int32)">
            <summary>
            Buys a specified <see cref="T:TermCraft.Item"/> from the <see cref="T:TermCraft.Market"/>
            </summary>
            <param name="item">What <see cref="T:TermCraft.Item"/> to buy</param>
            <param name="amount">How many of the <see cref="T:TermCraft.Item"/> to buy
            </param>
        </member>
        <member name="T:TermCraft.Player">
            <summary>
            Class of <see cref="T:TermCraft.Player"/>
            </summary>
        </member>
        <member name="P:TermCraft.Player.inventory">
            <summary>
            The <see cref="T:TermCraft.Inventory"/> attached to the <see cref="T:TermCraft.Player"/>
            </summary>
        </member>
        <member name="P:TermCraft.Player.level">
            <summary>
            The level of the <see cref="T:TermCraft.Player"/>
            </summary>
        </member>
        <member name="M:TermCraft.Player.Init">
            <summary>
            Initializes the <see cref="P:TermCraft.Player.inventory"/> of <see cref="T:TermCraft.Player"/> and sets <see cref="P:TermCraft.Player.level"/> to 1
            </summary>
        </member>
        <member name="M:TermCraft.Player.Init(TermCraft.Inventory,System.Int16)">
            <summary>
            Loads <paramref name="inventory"/> and <paramref name="level"/> to <see cref="P:TermCraft.Player.inventory"/> and <see cref="P:TermCraft.Player.level"/>
            </summary>
            <param name="inventory"></param>
            <param name="level"></param>
        </member>
        <member name="T:TermCraft.Register">
            <summary>
            AI/Building Register
            </summary>
        </member>
        <member name="P:TermCraft.Register.AIs">
            <summary>
            List of <see cref="T:TermCraft.AI"/>s in use
            </summary>
        </member>
        <member name="P:TermCraft.Register.Buildings">
            <summary>
            List of <see cref="T:TermCraft.Building"/>s in use
            </summary>
        </member>
        <member name="M:TermCraft.Register.Init">
            <summary>
            Initializes <see cref="P:TermCraft.Register.AIs"/> and <see cref="P:TermCraft.Register.Buildings"/>
            </summary>
        </member>
        <member name="M:TermCraft.Register.AddToRegister(TermCraft.AI)">
            <summary>
            Adds a specified <see cref="T:TermCraft.AI"/> to the register
            </summary>
            <param name="ai">The <see cref="T:TermCraft.AI"/> to add</param>
        </member>
        <member name="M:TermCraft.Register.AddToRegister(TermCraft.Building)">
            <summary>
            Adds a specified <see cref="T:TermCraft.Building"/> to the register
            </summary>
            <param name="building">The <see cref="T:TermCraft.Building"/> to add</param>
        </member>
        <member name="M:TermCraft.Register.RemoveFromRegister(TermCraft.AI)">
            <summary>
            Removes the specified <see cref="T:TermCraft.AI"/> from the register
            </summary>
            <param name="ai">The <see cref="T:TermCraft.AI"/> to remove</param>
        </member>
        <member name="M:TermCraft.Register.RemoveFromRegister(TermCraft.Building)">
            <summary>
            Removes the specified <see cref="T:TermCraft.Building"/> from the register
            </summary>
            <param name="building">The <see cref="T:TermCraft.Building"/> to Remove</param>
        </member>
        <member name="T:TermCraft.Program">
            <summary>
            Main class
            </summary>
        </member>
        <member name="F:TermCraft.Program.CultureInfo">
            <summary>
            Sets the games <see cref="T:System.Globalization.CultureInfo"/> to en-US
            </summary>
        </member>
        <member name="F:TermCraft.Program.wHorizontal">
            <summary>
            Horizontal length of the <see cref="T:System.Console"/>
            </summary>
        </member>
        <member name="F:TermCraft.Program.wVertical">
            <summary>
            Vertical length of the <see cref="T:System.Console"/>
            </summary>
        </member>
        <member name="F:TermCraft.Program.inputCaptured">
            <summary>
            Indicates if the application is currently reading user input
            </summary>
        </member>
        <member name="M:TermCraft.Program.DeleteMenu(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            External
            </summary>
        </member>
        <member name="M:TermCraft.Program.GetSystemMenu(System.IntPtr,System.Boolean)">
            <summary>
            External
            </summary>
        </member>
        <member name="M:TermCraft.Program.GetConsoleWindow">
            <summary>
            External
            </summary>
        </member>
        <member name="M:TermCraft.Program.Main">
            <summary>
            Starting point of the application.
            Configures <see cref="T:System.Console"/> in multiple steps, then starts capturing input.
            </summary>
        </member>
        <member name="M:TermCraft.Program.PreInitConsole">
            <summary>
            Stage 1 <see cref="T:System.Console"/> configuration.
            Locks the size controls and sets the <see cref="T:System.Console"/> size
            </summary>
        </member>
        <member name="M:TermCraft.Program.InitConsole">
            <summary>
            Stage 2 <see cref="T:System.Console"/> configuration.
            Initializes all static classes
            </summary>
        </member>
        <member name="M:TermCraft.Program.PostInitConsole">
            <summary>
            Stage 3 <see cref="T:System.Console"/> configuration.
            Starts timed events and displays the splash screen
            </summary>
        </member>
        <member name="M:TermCraft.Program.CaptureInput">
            <summary>
            Begins input capture
            </summary>
        </member>
        <member name="M:TermCraft.Program.Terminate">
            <summary>
            Called after <see cref="M:TermCraft.Program.CaptureInput"/> stops running.
            Saves and terminates the application
            </summary>
        </member>
        <member name="M:TermCraft.Program.SetCapture(System.Boolean)">
            <summary>
            Sets the state of <see cref="F:TermCraft.Program.inputCaptured"/>
            </summary>
            <param name="state">New state</param>
        </member>
    </members>
</doc>
